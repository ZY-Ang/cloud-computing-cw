# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1

defaults: &config_project_defaults
  working_directory: ~/repo

executors:
  node_default:
    docker:
      - image: circleci/node:12.13.0
  java_default:
    docker:
      - image: circleci/openjdk:8

orbs:
  aws-cli: circleci/aws-cli@0.1.22
  aws-serverless: circleci/aws-serverless@1.0.2

commands:
  configure_aws_env:
    description: "Sets up AWS environment variables"
    steps:
      - run:
          name: Setup user-defined aws environment variables
          command: |
            echo "export AWS_REGION=ap-southeast-1" >> $BASH_ENV
            echo "export AWS_BUILD_PROFILE=highsugar" >> $BASH_ENV
  configure_aws:
    description: "Sets up AWS profiles, CLI and configuration"
    steps:
      - configure_aws_env
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_REGION
          profile-name: $AWS_BUILD_PROFILE
  configure_aws_sam:
    description: "Installs the AWS SAM CLI"
    steps:
      - configure_aws_env
      - aws-serverless/install:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_REGION
          profile-name: $AWS_BUILD_PROFILE
  install_root_deps:
    description: "Installs root npm dependencies. Requires checkout of repo into ~/repo first."
    steps:
      - restore_cache:
          keys:
            - v1-{{ arch }}-{{ .Branch }}-{{ checksum "package-lock.json" }}-{{ .Revision }}
            - v1-{{ arch }}-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - v1-{{ arch }}-{{ .Branch }}
            - v1-{{ arch }}
      - run:
          working_directory: ~/repo
          command: npm install
      - save_cache:
          paths:
            - ~/repo/node_modules
          key: v1-{{ arch }}-{{ .Branch }}-{{ checksum "package-lock.json" }}-{{ .Revision }}
  download_wordpress:
    description: "Downloads wordpress and extracts files to subdirectory"
    steps:
      - run:
          working_directory: ~/tmp
          name: Download wordpress latest
          command: wget -c https://wordpress.org/latest.tar.gz -O - | tar -xz
      - run: cp -r ~/tmp/wordpress/* ~/repo/awswordpress/lambda/src/php

jobs:
  deploy_ibm_cf:
    <<: *config_project_defaults
    executor: node_default
    steps:
      - checkout
      - run: curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
      - run: which ibmcloud
      - run: ibmcloud login -u $CF_USERNAME -p $CF_PASSWORD -r us-south
      - run: ibmcloud target -o $CF_USERNAME -s prod -r us-south
#      - run: |
#          wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
#          echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
#          sudo apt-get update
#          sudo apt-get install cf-cli
#      - run: which cf && cf --version
#      - run: cf login -a "api.us-south.cf.cloud.ibm.com" -u $CF_USERNAME -p $CF_PASSWORD -o $CF_USERNAME -s prod
#      - run: cf push
      - run:
          working_directory: ~/repo/ibmcloudfoundryapp
          command: npm run deploy
  deploy_wp_single:
    <<: *config_project_defaults
    executor: node_default
    steps:
      - checkout
      - configure_aws
      - run:
          name: Deploy Architecture
          working_directory: ~/repo/awswordpress/single-instance
          command: >-
            aws cloudformation deploy
            --template-file template.yaml
            --stack-name alex-wp-single
            --capabilities CAPABILITY_IAM
            --parameter-overrides DBName=wordpressdb DBPassword=$DB_PASS DBRootPassword=$DB_PASS DBUser=$DB_USER InstanceType=t2.small KeyName=nusinstanceskeypair SSHLocation=0.0.0.0/0
            --profile $AWS_BUILD_PROFILE
            --region $AWS_REGION
            --no-fail-on-empty-changeset
  deploy_wp_multiaz:
    <<: *config_project_defaults
    executor: node_default
    steps:
      - checkout
      - configure_aws
      - install_root_deps
      - run:
          name: Setup dependent environment variables from default VPC
          command: |
            echo "export DEFAULT_VPC_ID=$(node ~/repo/vpc.js vpc)" >> $BASH_ENV
            echo "export DEFAULT_SUBNET_IDS=$(node ~/repo/vpc.js subnet)" >> $BASH_ENV
      - run:
          name: Deploy Architecture
          working_directory: ~/repo/awswordpress/multi-az
          command: >-
            aws cloudformation deploy
            --template-file template.yaml
            --stack-name alex-wp-multiaz
            --capabilities CAPABILITY_IAM
            --parameter-overrides DBClass=db.t2.small DBName=wordpressdb DBPassword=$DB_PASS DBUser=$DB_USER InstanceType=t2.small KeyName=nusinstanceskeypair MultiAZDatabase=true SSHLocation=0.0.0.0/0 Subnets=$DEFAULT_SUBNET_IDS VpcId=$DEFAULT_VPC_ID WebServerCapacity=2 WPSiteTitle="CS5224 Hello (Multi-AZ)" WPAdminUsername=$WP_USER WPAdminPassword=$WP_PASS WPAdminEmail=$WP_EMAIL
            --profile $AWS_BUILD_PROFILE
            --region $AWS_REGION
            --no-fail-on-empty-changeset
  deploy_wp_multiaz_autoscaling:
    <<: *config_project_defaults
    executor: node_default
    steps:
      - checkout
      - configure_aws
      - install_root_deps
      - run:
          name: Setup dependent environment variables from default VPC
          command: |
            echo "export DEFAULT_VPC_ID=$(node ~/repo/vpc.js vpc)" >> $BASH_ENV
            echo "export DEFAULT_SUBNET_IDS=$(node ~/repo/vpc.js subnet)" >> $BASH_ENV
      - run:
          name: Deploy Architecture
          working_directory: ~/repo/awswordpress/multi-az-autoscaling
          command: >-
            aws cloudformation deploy
            --template-file template.yaml
            --stack-name alex-wp-multiaz-autoscaling
            --capabilities CAPABILITY_IAM
            --parameter-overrides DBClass=db.t2.small DBName=wordpressdb DBPassword=$DB_PASS DBUser=$DB_USER InstanceType=t2.small KeyName=nusinstanceskeypair MultiAZDatabase=true SSHLocation=0.0.0.0/0 Subnets=$DEFAULT_SUBNET_IDS VpcId=$DEFAULT_VPC_ID WebServerMinCapacity=2 WebServerMaxCapacity=100 WPSiteTitle="CS5224 Hello (Multi-AZ Autoscaling)" WPAdminUsername=$WP_USER WPAdminPassword=$WP_PASS WPAdminEmail=$WP_EMAIL
            --profile $AWS_BUILD_PROFILE
            --region $AWS_REGION
            --no-fail-on-empty-changeset
  sync_up_emr_files:
    <<: *config_project_defaults
    executor: java_default
    steps:
      - checkout
      - configure_aws
      - restore_cache:
          name: Restore latest node_modules from cache
          keys:
            - emr-v1-{{ arch }}-{{ .Branch }}-{{ checksum "awsemr/pom.xml" }}-{{ .Revision }}
            - emr-v1-{{ arch }}-{{ .Branch }}-{{ checksum "awsemr/pom.xml" }}
            - emr-v1-{{ arch }}-{{ .Branch }}
            - emr-v1-{{ arch }}
      - run:
          working_directory: ~/repo/awsemr
          command: mvn dependency:go-offline
      - save_cache:
          name: Save post-install m2 dependencies into cache
          key: emr-v1-{{ arch }}-{{ .Branch }}-{{ checksum "awsemr/pom.xml" }}-{{ .Revision }}
          paths:
            - ~/.m2
      - run:
          working_directory: ~/repo/awsemr
          command: mvn clean
      - run:
          working_directory: ~/repo/awsemr
          command: mvn package
      - run:
          working_directory: ~/repo/awsemr
          command: mv ./target/* ./s3/
      - run:
          name: Upload directory to S3
          working_directory: ~/repo/awsemr/s3
          command: |
            aws s3 rm s3://alex-emr --recursive --profile $AWS_BUILD_PROFILE
            aws s3 sync . s3://alex-emr --profile $AWS_BUILD_PROFILE
  deploy_wp_lambda:
    <<: *config_project_defaults
    executor: node_default
    steps:
      - checkout
      - download_wordpress
      - configure_aws_sam
      - install_root_deps
      - run:
          name: Setup dependent environment variables from default VPC
          command: |
            echo "export DEFAULT_VPC_ID=$(node ~/repo/vpc.js vpc)" >> $BASH_ENV
            echo "export DEFAULT_SUBNET_IDS=$(node ~/repo/vpc.js subnet)" >> $BASH_ENV
            echo "export STACK_NAME=alex-wp-lambda" >> $BASH_ENV
            echo "export DEPLOYMENT_BUCKET=alex-wp-lambda-deployment-bucket" >> $BASH_ENV
      - run: node samBucket.js $DEPLOYMENT_BUCKET
      - run:
          name: Setup dependent environment variables from previously deployed stack or null
          command: |
            echo "export CLOUDFRONT_DOMAIN=$(node ~/repo/env.js $STACK_NAME CloudFrontDistributionDomainName)" >> $BASH_ENV
      - run:
          name: Fill in wp-config.php values
          working_directory: ~/repo/awswordpress/lambda/src/php
          command: |
            sed -i "s/'dbase_username_here'/'$DB_USER'/g" wp-config.php
            sed -i "s/'dbase_password_here'/'$DB_PASS'/g" wp-config.php
            if ! [ -z $CLOUDFRONT_DOMAIN ]; then sed -i "s/cloudfront_domain_here/$CLOUDFRONT_DOMAIN/g" wp-config.php; fi
            cat wp-config.php
      - run:
          name: sam package
          working_directory: ~/repo/awswordpress/lambda
          command: >-
            sam package
            --template-file template.yaml
            --output-template-file serverless-output.yaml
            --s3-bucket $DEPLOYMENT_BUCKET
            --profile $AWS_BUILD_PROFILE
            --region $AWS_REGION
      - run:
          name: sam deploy
          working_directory: ~/repo/awswordpress/lambda
          command: >-
            sam deploy
            --template-file serverless-output.yaml
            --s3-bucket $DEPLOYMENT_BUCKET
            --stack-name $STACK_NAME
            --capabilities CAPABILITY_IAM
            --parameter-overrides DBName=wordpressdb DBPassword=$DB_PASS DBUser=$DB_USER VpcId=$DEFAULT_VPC_ID VpcSubnetIds=$DEFAULT_SUBNET_IDS
            --profile $AWS_BUILD_PROFILE
            --region $AWS_REGION
            --no-fail-on-empty-changeset
      - run:
          name: Setup dependent environment variables from deployed stack
          command: |
            echo "export ASSETS_BUCKET_NAME=$(node ~/repo/env.js $STACK_NAME AssetsBucketName)" >> $BASH_ENV
            if [ -z $CLOUDFRONT_DOMAIN ];then echo "export NEW_CF_DOMAIN=$(node ~/repo/env.js $STACK_NAME CloudFrontDistributionDomainName)" >> $BASH_ENV;fi
      - run:
          name: Fill in wp-config.php updated domain name (if necessary)
          working_directory: ~/repo/awswordpress/lambda/src/php
          command: >-
            if [ -z $CLOUDFRONT_DOMAIN ];
            then sed -i "s/cloudfront_domain_here/$NEW_CF_DOMAIN/g" wp-config.php;
            fi
      - run:
          name: sam repackage with updated wp-config.php (if necessary)
          working_directory: ~/repo/awswordpress/lambda
          command: >-
            if [ -z $CLOUDFRONT_DOMAIN ];
            then sam package
            --template-file template.yaml
            --output-template-file serverless-output.yaml
            --s3-bucket $DEPLOYMENT_BUCKET
            --profile $AWS_BUILD_PROFILE
            --region $AWS_REGION;
            fi
      - run:
          name: sam redeploy with updated wp-config.php (if necessary)
          working_directory: ~/repo/awswordpress/lambda
          command: >-
            if [ -z $CLOUDFRONT_DOMAIN ];
            then sam deploy
            --template-file serverless-output.yaml
            --s3-bucket $DEPLOYMENT_BUCKET
            --stack-name $STACK_NAME
            --capabilities CAPABILITY_IAM
            --parameter-overrides DBClass=db.t2.small DBName=wordpressdb DBPassword=$DB_PASS DBUser=$DB_USER VpcId=$DEFAULT_VPC_ID VpcSubnetIds=$DEFAULT_SUBNET_IDS
            --profile $AWS_BUILD_PROFILE
            --region $AWS_REGION
            --no-fail-on-empty-changeset;
            fi
      - run:
          working_directory: ~/repo/awswordpress/lambda/src/php
          command: |
            aws s3 sync . s3://$ASSETS_BUCKET_NAME --profile $AWS_BUILD_PROFILE --exclude "*.php" --exclude "*.ini"

workflows:
  version: 2
  master_flow:
    jobs:
      - deploy_ibm_cf:
          filters:
            branches:
              only:
                - ibm
      - deploy_wp_single:
          filters:
            branches:
              only:
                - single
                - master
      - deploy_wp_multiaz:
          filters:
            branches:
              only:
                - master
                - maz
      - deploy_wp_multiaz_autoscaling:
          filters:
            branches:
              only:
                - master
                - as
      - sync_up_emr_files:
          filters:
            branches:
              only:
                - emr
      - deploy_wp_lambda:
          filters:
            branches:
              only:
                - master
                - lambda
